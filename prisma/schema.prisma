// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WebniarStatus {
  LIVE
  UPCOMING
  COMPLETED
  CANCELED
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  userName        String?           @unique
  image           String?
  password        String?
  createdAt       DateTime          @default(now())
  emailVerified   DateTime?
  updatedAt       DateTime          @updatedAt
  accounts        Account[]
  webinarsCreated Webniar[]         @relation("WebniarCreator")
  webinarsJoined  WebniarAttendee[]

  // categoriesCreated Category[]  @relation("CategoryCreator")
  instructorInfo Instructor? @relation("UserInstructor")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Webniar {
  id           String        @id @default(cuid())
  title        String
  date         DateTime
  time         String
  duration     String
  description  String
  level        String
  maxAttendees Int
  linl         String?
  category     String
  price        String        @default("Free")
  status       WebniarStatus @default(UPCOMING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  creatorId String
  creator   User   @relation("WebniarCreator", fields: [creatorId], references: [id])

  // Category   Category? @relation(fields: [categoryId], references: [id])
  // categoryId String?

  attendees WebniarAttendee[]

  instructorId String
  instructor   Instructor @relation("WebniarInstructor", fields: [instructorId], references: [id])
}

model WebniarAttendee {
  id        String   @id @default(cuid())
  userId    String
  webniarId String
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  webniar   Webniar  @relation(fields: [webniarId], references: [id])

  @@unique([userId, webniarId])
}

// model Category {
//   id        String    @id @default(cuid())
//   title     String    @unique
//   createdAt DateTime  @default(now())
//   createdBy String
//   creator   User      @relation("CategoryCreator", fields: [createdBy], references: [id])
//   webinars  Webniar[]
// }

model Instructor {
  id                String   @id @default(cuid())
  userId            String   @unique
  title             String
  specialization    String
  joinedDate        DateTime @default(now())
  totalWebinars     Int      @default(0)
  totalStudents     Int      @default(0)
  rating            Float    @default(0)
  status            String   @default("active")
  bio               String
  upcomingWebinars  Int      @default(0)
  completedWebinars Int      @default(0)

  user User @relation("UserInstructor", fields: [userId], references: [id])

  webinarsHosted Webniar[] @relation("WebniarInstructor")
}
